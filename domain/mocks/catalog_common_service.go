// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	domain "github.com/aasumitro/posbe/domain"
	mock "github.com/stretchr/testify/mock"

	utils "github.com/aasumitro/posbe/pkg/utils"
)

// ICatalogCommonService is an autogenerated mock type for the ICatalogCommonService type
type ICatalogCommonService struct {
	mock.Mock
}

// AddAddon provides a mock function with given fields: data
func (_m *ICatalogCommonService) AddAddon(data *domain.Addon) (*domain.Addon, *utils.ServiceError) {
	ret := _m.Called(data)

	var r0 *domain.Addon
	if rf, ok := ret.Get(0).(func(*domain.Addon) *domain.Addon); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Addon)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(*domain.Addon) *utils.ServiceError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// AddCategory provides a mock function with given fields: data
func (_m *ICatalogCommonService) AddCategory(data *domain.Category) (*domain.Category, *utils.ServiceError) {
	ret := _m.Called(data)

	var r0 *domain.Category
	if rf, ok := ret.Get(0).(func(*domain.Category) *domain.Category); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(*domain.Category) *utils.ServiceError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// AddSubcategory provides a mock function with given fields: data
func (_m *ICatalogCommonService) AddSubcategory(data *domain.Subcategory) (*domain.Subcategory, *utils.ServiceError) {
	ret := _m.Called(data)

	var r0 *domain.Subcategory
	if rf, ok := ret.Get(0).(func(*domain.Subcategory) *domain.Subcategory); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subcategory)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(*domain.Subcategory) *utils.ServiceError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// AddUnit provides a mock function with given fields: data
func (_m *ICatalogCommonService) AddUnit(data *domain.Unit) (*domain.Unit, *utils.ServiceError) {
	ret := _m.Called(data)

	var r0 *domain.Unit
	if rf, ok := ret.Get(0).(func(*domain.Unit) *domain.Unit); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Unit)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(*domain.Unit) *utils.ServiceError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// AddonList provides a mock function with given fields:
func (_m *ICatalogCommonService) AddonList() ([]*domain.Addon, *utils.ServiceError) {
	ret := _m.Called()

	var r0 []*domain.Addon
	if rf, ok := ret.Get(0).(func() []*domain.Addon); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Addon)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func() *utils.ServiceError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// CategoryList provides a mock function with given fields:
func (_m *ICatalogCommonService) CategoryList() ([]*domain.Category, *utils.ServiceError) {
	ret := _m.Called()

	var r0 []*domain.Category
	if rf, ok := ret.Get(0).(func() []*domain.Category); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Category)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func() *utils.ServiceError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// DeleteAddon provides a mock function with given fields: data
func (_m *ICatalogCommonService) DeleteAddon(data *domain.Addon) *utils.ServiceError {
	ret := _m.Called(data)

	var r0 *utils.ServiceError
	if rf, ok := ret.Get(0).(func(*domain.Addon) *utils.ServiceError); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ServiceError)
		}
	}

	return r0
}

// DeleteCategory provides a mock function with given fields: data
func (_m *ICatalogCommonService) DeleteCategory(data *domain.Category) *utils.ServiceError {
	ret := _m.Called(data)

	var r0 *utils.ServiceError
	if rf, ok := ret.Get(0).(func(*domain.Category) *utils.ServiceError); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ServiceError)
		}
	}

	return r0
}

// DeleteSubcategory provides a mock function with given fields: data
func (_m *ICatalogCommonService) DeleteSubcategory(data *domain.Subcategory) *utils.ServiceError {
	ret := _m.Called(data)

	var r0 *utils.ServiceError
	if rf, ok := ret.Get(0).(func(*domain.Subcategory) *utils.ServiceError); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ServiceError)
		}
	}

	return r0
}

// DeleteUnit provides a mock function with given fields: data
func (_m *ICatalogCommonService) DeleteUnit(data *domain.Unit) *utils.ServiceError {
	ret := _m.Called(data)

	var r0 *utils.ServiceError
	if rf, ok := ret.Get(0).(func(*domain.Unit) *utils.ServiceError); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*utils.ServiceError)
		}
	}

	return r0
}

// EditAddon provides a mock function with given fields: data
func (_m *ICatalogCommonService) EditAddon(data *domain.Addon) (*domain.Addon, *utils.ServiceError) {
	ret := _m.Called(data)

	var r0 *domain.Addon
	if rf, ok := ret.Get(0).(func(*domain.Addon) *domain.Addon); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Addon)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(*domain.Addon) *utils.ServiceError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// EditCategory provides a mock function with given fields: data
func (_m *ICatalogCommonService) EditCategory(data *domain.Category) (*domain.Category, *utils.ServiceError) {
	ret := _m.Called(data)

	var r0 *domain.Category
	if rf, ok := ret.Get(0).(func(*domain.Category) *domain.Category); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Category)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(*domain.Category) *utils.ServiceError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// EditSubcategory provides a mock function with given fields: data
func (_m *ICatalogCommonService) EditSubcategory(data *domain.Subcategory) (*domain.Subcategory, *utils.ServiceError) {
	ret := _m.Called(data)

	var r0 *domain.Subcategory
	if rf, ok := ret.Get(0).(func(*domain.Subcategory) *domain.Subcategory); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Subcategory)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(*domain.Subcategory) *utils.ServiceError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// EditUnit provides a mock function with given fields: data
func (_m *ICatalogCommonService) EditUnit(data *domain.Unit) (*domain.Unit, *utils.ServiceError) {
	ret := _m.Called(data)

	var r0 *domain.Unit
	if rf, ok := ret.Get(0).(func(*domain.Unit) *domain.Unit); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Unit)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func(*domain.Unit) *utils.ServiceError); ok {
		r1 = rf(data)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// SubcategoryList provides a mock function with given fields:
func (_m *ICatalogCommonService) SubcategoryList() ([]*domain.Subcategory, *utils.ServiceError) {
	ret := _m.Called()

	var r0 []*domain.Subcategory
	if rf, ok := ret.Get(0).(func() []*domain.Subcategory); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Subcategory)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func() *utils.ServiceError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

// UnitList provides a mock function with given fields:
func (_m *ICatalogCommonService) UnitList() ([]*domain.Unit, *utils.ServiceError) {
	ret := _m.Called()

	var r0 []*domain.Unit
	if rf, ok := ret.Get(0).(func() []*domain.Unit); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.Unit)
		}
	}

	var r1 *utils.ServiceError
	if rf, ok := ret.Get(1).(func() *utils.ServiceError); ok {
		r1 = rf()
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(*utils.ServiceError)
		}
	}

	return r0, r1
}

type mockConstructorTestingTNewICatalogCommonService interface {
	mock.TestingT
	Cleanup(func())
}

// NewICatalogCommonService creates a new instance of ICatalogCommonService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewICatalogCommonService(t mockConstructorTestingTNewICatalogCommonService) *ICatalogCommonService {
	mock := &ICatalogCommonService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
