// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	domain "github.com/aasumitro/posbe/pkg/model"
	mock "github.com/stretchr/testify/mock"
)

// IStorePrefRepository is an autogenerated mock type for the IStorePrefRepository type
type IStorePrefRepository struct {
	mock.Mock
}

// All provides a mock function with given fields: ctx
func (_m *IStorePrefRepository) All(ctx context.Context) (*domain.StoreSetting, error) {
	ret := _m.Called(ctx)

	var r0 *domain.StoreSetting
	if rf, ok := ret.Get(0).(func(context.Context) *domain.StoreSetting); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StoreSetting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Find provides a mock function with given fields: ctx, key
func (_m *IStorePrefRepository) Find(ctx context.Context, key string) (*domain.StoreSetting, error) {
	ret := _m.Called(ctx, key)

	var r0 *domain.StoreSetting
	if rf, ok := ret.Get(0).(func(context.Context, string) *domain.StoreSetting); ok {
		r0 = rf(ctx, key)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StoreSetting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, key, value
func (_m *IStorePrefRepository) Update(ctx context.Context, key string, value string) (*domain.StoreSetting, error) {
	ret := _m.Called(ctx, key, value)

	var r0 *domain.StoreSetting
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domain.StoreSetting); ok {
		r0 = rf(ctx, key, value)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.StoreSetting)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, key, value)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewIStorePrefRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewIStorePrefRepository creates a new instance of IStorePrefRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIStorePrefRepository(t mockConstructorTestingTNewIStorePrefRepository) *IStorePrefRepository {
	mock := &IStorePrefRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
